x-ampq-url: &ampq-url amqp://user:pass@rabbitmq:5672
x-cron-schedule: &cron-schedule '0 * * * *'
x-fred-key: &fred_api 3d7c8197c322b5c1ba5a7d57a965bcc3
services:
  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP protocol port
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Ensure RabbitMQ doesn't go nuts
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations: 
          cpus: '0.1'
          memory: 128M
  
  timescaledb:
    image: timescale/timescaledb:latest-pg17
    container_name: timescaledb
    ports:
      - "5432:5432" 
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres 
      POSTGRES_DB: market_signals
    volumes:
      - timescaledb_data:/var/lib/postgresql/data  
      - ./timescaledb-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d market_signals -c 'SELECT 1 FROM public.assets LIMIT 1'"]
      interval: 10s  
      timeout: 5s     
      retries: 10     
      start_period: 20s 
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M


  data-collector:
    build:
      context: .      
      dockerfile: ./data-collector/data-collector.dockerfile
    container_name: data-collector
    ports:
      - "3000:3000" 
    environment:
      FRED_API_KEY: *fred_api
      CRON_SCHEDULE: *cron-schedule
      RABBITMQ_URL: *ampq-url
      HEALTH_HEAP_WARNING_MB: 512
      HEALTH_HEAP_CRITICAL_MB: 768
      MONITOR_CHECK_INTERVAL_CRON: '*/45 * * * *'
      PORT: 3000

    depends_on:
      rabbitmq:
        condition: service_healthy 
      timescaledb:
        condition: service_healthy 
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  signal-persister: 
    build:
      context: .
      dockerfile: ./signal-persister/signal-persister.dockerfile
    container_name: signal-persister
    environment:
      RABBITMQ_URL: *ampq-url
      DB_USER: postgres
      DB_HOST: timescaledb
      DB_NAME: market_signals
      DB_PASSWORD: postgres
      DB_PORT: '5432'
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    restart: unless-stopped

    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  signal-query-api:
    build:
      context: .
      dockerfile: ./signal-query-api/signal-query-api.dockerfile
    container_name: signal-query-api
    ports:
      - "8080:3003"
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: market_signals
      PORT: 3003      
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: unless-stopped

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  micro-frontend:
    build:
      context: .
      dockerfile: ./micro-frontend/micro-frontend.dockerfile
    container_name: micro-frontend
    ports:
      - "3001:80"
    depends_on:
      signal-query-api:
       
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
  scraper-service:
    build:
      context: .
      dockerfile: ./scraper-service/scraper-service.dockerfile
    container_name: scraper-service
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: market_signals
      PORT: 5432
      RABBITMQ_URL: *ampq-url
      CRON_SCHEDULE: *cron-schedule
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb: 
        condition: service_healthy 
      sentiment-analysis-service:
        condition: service_healthy
    restart: unless-stopped
    # Scraping can be memory intensive. 
    mem_limit: 4gb
    # Playwright needs a large shared memory size to run Chromium.
    shm_size: '2gb'

  sentiment-analysis-service:
      build:
        context: .
        dockerfile: ./sentiment-analysis-service/sentiment-analysis.dockerfile
      environment:
        - RABBITMQ_HOST=rabbitmq
      depends_on:
        rabbitmq:
          condition: service_healthy
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:6220/health || exit 1"]
        start_period: 60s
      restart: unless-stopped
      
volumes: 
  timescaledb_data:
  